#include <iostream>
#include "../inc/Image.h"
#include "../inc/Filter.h"
#include "../inc/ImageProcessor.h"
#include "../inc/FilterAutoGenerated.h"
#include "../inc/FilterNoCopy.h"

#define GREEN "\033[32m"
#define MAGENTA "\033[35m"
#define BLUE "\033[34m"
#define RESET "\033[0m"

void createSeparator(const std::string& color, const std::string& text) {
    std::cout << color << "\n----- " + text + " -----\n\n" << RESET;
}

void Tema1() {

    createSeparator(GREEN, "Create an image");

    Image img("image1.png");
    std::cout << "Image resolution: (" << img.getWidth() << "x" << img.getHeight() << ")\n";

    createSeparator(GREEN, "Create filters");
    Filter edgeFilter("Sobel Operator", 3);
    Filter blurFilter("Gaussian Blur", 5);
    Filter edgeFilter2("Canny Edge Detection", 7);

    createSeparator(GREEN, "Create image processor");
    ImageProcessor processor;

    createSeparator(GREEN, "Add filters to processor");
    processor.addFilter(edgeFilter);
    processor.addFilter(blurFilter);
    processor.addFilter(edgeFilter2);

    createSeparator(GREEN, "Show processing pipeline");
    processor.showPipeline();

    createSeparator(GREEN, "Apply the filters");
    processor.process(img);

    createSeparator(GREEN, "Save the image");
    if (img.save("output.jpeg")) {
        std::cout << "Image saved successfully!\n";
    } else {
        std::cout << "Failed to save image!\n";
    }

    // Copy constructor vs Move constructor
    createSeparator(GREEN, "Copy constructor");
    ImageProcessor copied_processor = processor; // copy constructor

    createSeparator(GREEN, "Move constructor");
    ImageProcessor moved_processor = std::move(processor); // move constructor

    createSeparator(GREEN, "Destructors");
}

void Tema2() {

    createSeparator(GREEN, "Item 4 - Make sure that objects are initialized before they`re used");
    Filter f0("Gaussian Blur", 5); // objects initialized using initialization list

    createSeparator(GREEN, "Item 5 - Know what functions C++ silently writes and calls.");
    createSeparator(BLUE, "Class with declared constructor, destructor, copy constructor and copy assignment operator");
    Filter f1("Canny Edge Filter", 7); // constructor and destructor
    Filter f2(f1);        // copy constructor
    f1 = f2;              // copy assignment operator

    createSeparator(BLUE, "Class without declared constructor, destructor, copy constructor and copy assignment operator");
    FilterAutoGenerated f3; // constructor and destructor
    f3.setType("Laplacian Filter");
    f3.setSize(9);
    std::cout << "Filter " << f3.getType() << " and size " << f3.getSize() << "\n";

    FilterAutoGenerated f4(f3); // copy constructor
    std::cout << "Filter " << f4.getType() << " and size " << f4.getSize() << "\n";

    f4.setSize(7);
    f3 = f4; // copy assignment operator
    std::cout << "Filter " << f3.getType() << " and size " << f3.getSize() << "\n";

    createSeparator(GREEN, "Item 6 - Explicitly disallow the use of compiler-generated functions.");

    FilterNoCopy f5;
    f5.setType("Sobel");
    f5.setSize(3);
    std::cout << "Filter " << f3.getType() << " and size " << f3.getSize() << "\n";

    // Copy ctor and copy assignment operator deleted
    // These calls will cause compilation errrors

    // FilterNoCopy f6(f5); // copy constructor
    // f5 = f6; // copy assignment operator

    createSeparator(GREEN, "Destructors");
}

int main(int argc, char* argv[]) {

    if (argc != 2) {
        std::cerr << "Folosire: " << argv[0] << " <Tema1|Tema2>\n";
        return 1;
    }

    std::string argument = argv[1];
    if (argument == "Tema1") {
        Tema1();
    } else if (argument == "Tema2") {
        Tema2();
    } else {
        std::cerr << "Argument invalid\n";
        return 1;
    }

    return 0;
}
